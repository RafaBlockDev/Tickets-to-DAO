{"version":3,"sources":["styles/globalStyles.js","App.js","redux/blockchain/blockchainActions.js","reportWebVitals.js","index.js","redux/data/dataActions.js","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js"],"names":["Screen","styled","div","image","SpacerSmall","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","ipfsClient","create","StyledButton","button","App","dispatch","useDispatch","blockchain","useSelector","state","data","useState","loading","setLoading","status","setStatus","NFTS","setNFTS","elementRef","useRef","ipfsBaseUrl","console","log","createMetaDataAndMint","_name","_des","_imgBuffer","a","add","addedImage","metaDataObj","name","description","path","JSON","stringify","addedMetaData","_uri","smartContract","methods","mint","account","send","from","once","err","then","receipt","clearCanvas","fetchData","getImageData","dataUrl","current","toDataURL","Buffer","split","clear","useEffect","allTokens","forEach","nft","fetch","uri","response","json","metaData","prevState","id","catch","onClick","e","preventDefault","connect","errorMsg","style","padding","textAlign","backgroundColor","canvasProps","width","height","ref","map","index","alt","src","connectFailed","payload","type","window","ethereum","web3","Web3","request","method","accounts","networkId","SmartContract","networks","NetworkData","SmartContractObj","eth","Contract","abi","address","on","updateAccount","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","store","document","getElementById","fetchDataFailed","getState","call","getAllTokens","initialState","blockchainReducer","action","error","dataReducer","rootReducer","combineReducers","middleware","thunk","composeEnhancers","compose","applyMiddleware","createStore"],"mappings":"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","file":"static/js/main.12eb62bc.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--dark-grey);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--white);\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--white);\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--white);\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport SignatureCanvas from \"react-signature-canvas\";\n\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState(\"\");\n  const [NFTS, setNFTS] = useState([]);\n  const elementRef = useRef();\n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\n  const name = \"NFT name\";\n  const description = \"IPFS minted nft woooooo.\";\n\n  console.log(NFTS);\n\n  const mint = (_uri) => {\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _uri)\n      .send({ from: blockchain.account })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        setStatus(\"Error\");\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setLoading(false);\n        clearCanvas();\n        dispatch(fetchData(blockchain.account));\n        setStatus(\"Successfully minting your NFT\");\n      });\n  };\n\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\n    setLoading(true);\n    setStatus(\"Uploading to IPFS\");\n    try {\n      const addedImage = await ipfsClient.add(_imgBuffer);\n      const metaDataObj = {\n        name: _name,\n        description: _des,\n        image: ipfsBaseUrl + addedImage.path,\n      };\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\n      console.log(ipfsBaseUrl + addedMetaData.path);\n      mint(ipfsBaseUrl + addedMetaData.path);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n      setStatus(\"Error\");\n    }\n  };\n\n  const startMintingProcess = () => {\n    createMetaDataAndMint(name, description, getImageData());\n  };\n\n  const getImageData = () => {\n    const canvasEl = elementRef.current;\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\n    return buffer;\n  };\n\n  const fetchMetatDataForNFTS = () => {\n    setNFTS([]);\n    data.allTokens.forEach((nft) => {\n      fetch(nft.uri)\n        .then((response) => response.json())\n        .then((metaData) => {\n          setNFTS((prevState) => [\n            ...prevState,\n            { id: nft.id, metaData: metaData },\n          ]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvasEl = elementRef.current;\n    canvasEl.clear();\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n\n  useEffect(() => {\n    fetchMetatDataForNFTS();\n  }, [data.allTokens]);\n\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.smartContract === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Connect to the Blockchain</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            CONNECT\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            Welcome mint your signature\n          </s.TextTitle>\n          {loading ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                loading...\n              </s.TextDescription>\n            </>\n          ) : null}\n          {status !== \"\" ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                {status}\n              </s.TextDescription>\n            </>\n          ) : null}\n          <s.SpacerLarge />\n          <s.Container fd={\"row\"} jc={\"center\"}>\n            <StyledButton\n              onClick={(e) => {\n                e.preventDefault();\n                startMintingProcess();\n              }}\n            >\n              MINT\n            </StyledButton>\n            <s.SpacerSmall />\n            <StyledButton\n              onClick={(e) => {\n                e.preventDefault();\n                clearCanvas();\n              }}\n            >\n              CLEAR\n            </StyledButton>\n          </s.Container>\n          <s.SpacerLarge />\n          <SignatureCanvas\n            backgroundColor={\"#3271bf\"}\n            canvasProps={{ width: 350, height: 350 }}\n            ref={elementRef}\n          />\n          <s.SpacerLarge />\n          {data.loading ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                loading...\n              </s.TextDescription>\n            </>\n          ) : (\n            NFTS.map((nft, index) => {\n              return (\n                <s.Container key={index} style={{ padding: 16 }}>\n                  <s.TextTitle>{nft.metaData.name}</s.TextTitle>\n                  <img\n                    alt={nft.metaData.name}\n                    src={nft.metaData.image}\n                    width={150}\n                  />\n                </s.Container>\n              );\n            })\n          )}\n        </s.Container>\n      )}\n    </s.Screen>\n  );\n}\n\nexport default App;\n","// constants\nimport Web3 from \"web3\";\nimport SmartContract from \"../../contracts/SmartContract.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        const NetworkData = await SmartContract.networks[networkId];\n        if (NetworkData) {\n          const SmartContractObj = new web3.eth.Contract(\n            SmartContract.abi,\n            NetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n      let allTokens = await store\n        .getState()\n        .blockchain.smartContract.methods.getAllTokens()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n          allTokens,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  allTokens: [],\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        name: action.payload.name,\n        allTokens: action.payload.allTokens,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n"],"sourceRoot":""}